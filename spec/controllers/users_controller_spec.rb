require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      inputUserName:         "Teste",
      inputPassword:     "1234578"
    }
  }
  let(:valid_attributes_create){
    {
      inputUserName: "Teste",
      inputPassword: "12345678",
      inputPostal: 7190050,
      inputStreet: "Av. Odair Santanelli",
      inputCity: "Guarulhos",
      inputState: "SÃ£o Paulo",
      inputCountry: "Brasil",
      inputTel: 5511999999999,
      inputEmail: "teste@teste.com.br"
      # name: "Teste"
      # password: "12345678"
      # postal_code = user_informations[:inputPostal].to_s
      # street_name = user_informations[:inputStreet].to_s
      # city_name = user_informations[:inputCity].to_s
      # state_name = user_informations[:inputState].to_s
      # country_name = user_informations[:inputCountry].to_s
      # telephone = user_informations[:inputTel].to_s
      # email = user_informations[:inputEmail].to_s
    }
  }

  let(:invalid_attributes) {
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all users as @users" do
      #  user = User.login valid_attributes
      #  get :index, params: {}, session: valid_session
      #  expect(assigns(:users)).to eq([user])
    end
  end


  describe "GET #new" do
    it "assigns a new user as @user" do
      # get :new, params: {}, session: valid_session
      # expect(assigns(:user)).to be_a_new(User)
    end
  end
end
