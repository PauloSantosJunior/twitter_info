require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    ActionController::Parameters.new(inputUserName: "Teste" , inputPassword: "12345678")
  }
  let(:valid_new_user){
    {
      inputUserName: "Teste",
      inputPassword: "123456789",
      inputPostal: 7190050,
      inputStreet: "Av. Odair Santanelli",
      inputCity: "Guarulhos",
      inputState: "SÃ£o Paulo",
      inputCountry: "Brasil",
      inputTel: 5511999999999,
      inputEmail: "teste@teste.com.br"
    }
  }

  let(:valid_exiting_user) {
    {
      inputUserName: "Teste",
      inputPassword: "12345678",
      inputPostal: 7190050,
      inputStreet: "Av. Odair Santanelli",
      inputCity: "Guarulhos",
      inputState: "SÃ£o Paulo",
      inputCountry: "Brasil",
      inputTel: 5511999999999,
      inputEmail: "teste@teste.com.br"
    }
  }

  let(:invalid_new_user){
    {
      inputUserName: "Teste",
      inputPassword: "123456789",
      inputPostal: 7190050,
      inputStreet: "Av. Odair Santanelli",
      inputCountry: "Brasil",
      inputTel: 5511999999999,
      inputEmail: "teste@teste.com.br"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.

  describe "GET #login" do
    context 'try to connect a user' do
      it "Trying to connect a valid user" do
        get :login, { inputUserName: "Teste" , inputPassword: "12345678", format: :html }
        expect(response).to redirect_to controller: :twitter_info, :action => :index
      end
    end
    context 'try to connect a user' do
      it "Trying to connect a invalid user" do
        get :login, { inputUserName: "Teste" , inputPassword: "senhainvaldia", format: :html }
        expect(response).to redirect_to controller: :users, :action => :index
      end
    end
  end


  describe "GET #create" do
    context 'try to create a user' do
      it "Trying to create a valid user" do
        get :create, valid_new_user
        expect(response).to redirect_to "/auth/twitter"
      end
      it "Trying to create a existing user" do
        get :create, valid_exiting_user
        expect(response).to redirect_to controller: :users, :action => :index
      end
    end
    context 'try to create a user' do
      it "Trying to create a invalid user" do
        get :create, invalid_new_user
        expect(response).to redirect_to controller: :users, :action => :new
      end
    end
  end
end
